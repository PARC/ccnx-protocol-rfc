<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
    which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
    There has to be one entity for each item to be referenced. 
    An alternate method (rfc include) is described in the references. -->

<!ENTITY RFC2119 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2629 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2629.xml">
<!ENTITY RFC3552 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.3552.xml">
<!ENTITY RFC5226 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs), 
    please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
    (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space 
    (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="no" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->

<?rfc private="" ?>

<rfc category="exp" docName="draft-mosko-icnrg-ccnxfragmentation-01" ipr="trust200902">
  <!-- category values: std, bcp, info, exp, and historic
    ipr values: trust200902, noModificationTrust200902, noDerivativesTrust200902,
       or pre5378Trust200902
    you can add the attributes updates="NNNN" and obsoletes="NNNN" 
    they will automatically be output with "(if approved)" -->

  <!-- ***** FRONT MATTER ***** -->

  <front>
    <!-- The abbreviated title is used in the page header - it is only necessary if the 
        full title is longer than 39 characters -->

    <title abbrev="CCNx TLV">CCNx End-To-End Fragmentation</title>

    <!-- add 'role="editor"' below for the editors if appropriate -->

    <!-- Another author who claims to be an editor -->

    <author fullname="Marc Mosko" initials="M.E." surname="Mosko">
      <organization>PARC, Inc.</organization>

      <address>
       <postal>
         <street/>

         <!-- Reorder these if your country does things differently -->

         <city>Palo Alto</city>

         <region>California</region>

         <code>94304</code>

         <country>USA</country>
       </postal>

       <phone>+01 650-812-4405</phone>

       <email>marc.mosko@parc.com</email>

       <!-- uri and facsimile elements may also be added -->
     </address>
    </author>

    <date year="2015"/>

    <!-- If the month and year are both specified and are the current ones, xml2rfc will fill 
        in the current day for you. If only the current year is specified, xml2rfc will fill 
	 in the current day and month for you. If the year is not the current one, it is 
	 necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the 
	 purpose of calculating the expiry date).  With drafts it is normally sufficient to 
	 specify just the year. -->

    <!-- Meta-data Declarations -->

    <area>General</area>

    <workgroup>ICNRG</workgroup>

    <!-- WG name at the upperleft corner of the doc,
        IETF is fine for individual submissions.  
	 If this element is not present, the default is "Network Working Group",
        which is used by the RFC Editor as a nod to the history of the IETF. -->

    <keyword>Content Centric Networking</keyword>

    <!-- Keywords will be incorporated into HTML output
        files in a meta tag but they have no effect on text or nroff
        output. If you submit your draft to the RFC Editor, the
        keywords will be used for the search engine. -->


    <abstract>
      <t>This document specifies an end to-end fragmentation protocol for
      breaking a Content Object into several smaller pieces in order to fit within
      a network MTU.  The fragmentation protocol does not provide a secure
      binding of the fragments to the original object. This is left to
      the receiving endpoint.  Midpoints may only serve fragments from their
      cache if they have assembled and verified the complete Content Object.</t>

    </abstract>
  </front>

  <middle>    
     <section title="Introduction">
       <t>This document specifies an end-to-end fragmentation protocol for
         breaking a Content Object into several smaller pieces in order to fit within
         a network MTU.  The fragmentation protocol does not provide a secure
         binding of the fragments to the original object. This is left to
         the receiving endpoint.  Midpoints may only serve fragments from
         cache if they have assembled and verified the complete Content Object.</t>
       
      <t>Packets are represented as 32-bit wide words using ASCII art.  Because
      of the TLV encoding and optional fields or sizes, there is no concise
      way to represent all possibilities.  We use the convention that ASCII art
      fields enclosed by vertical bars "|" represent exact bit widths.  Fields
      with a forward slash "/" are variable bitwidths, which we typically pad
      out to word alignment for picture readability.</t>

       <t>TODO -- we have not adopted the Requirements Language yet.</t>
      <section title="Requirements Language">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD
          NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as
          described in <xref target="RFC2119">RFC 2119</xref>.</t>
      </section>
    </section>

    <section anchor="protocol" title="Protocol Description">
      <t>
      The principle of operation for fragmentation in CCNx 1.0 is that
      intermediate systems should not have to fragment packets.  An Interest message is 
      always fragmented to the minimum MTU size and 
      the forward path's MTU size is recorded in the Interest message
      so that a system sending back a Content
      Object can fragment it to the the correct size for the path.  An
      intermediate system's Content Store may store only pre-fragmented
      objects and respond only if those fragments satisfy the requirements of an Interest's
      MTU, otherwise it will be considered a cache miss.
      </t>
      
      <t>Because the Interest is the path discovery mechanism for Content 
      Objects, all Interests MUST carry an InterestFragmentationHeader that 
      includes information about the forward path's MTU 
      so the reverse path MTU may be known at the node responding with a
      Content Object.</t>
      
       <t>
      The minimum MTU required is 1280 octets.  Any system
      implementing a physical layer with a smaller MTU must implement link
      fragmentation, for example using a PPP layer over the small MTU
      network.
      </t>

      <t>Systems MUST create fragment streams in the most compressed
        packing.  That is, all fragments except the last MUST be fragmented
        to the same size.  This means that all Interests are fragmented
      to 1280 bytes except the last fragment. A Content Object may be fragmented
      to any size no more than the path MTU discovered, but all fragments
      except the last MUST be the same size.  This ensures that any
      two fragment streams of the same Content Object with the same
      MTU have the same representation.</t>
      
      <t>
      When an end system creates a fragment stream, it generates a
      64-bit number for the FragmentStreamID.  This number identifies a
      contiguous stream of fragments and allows an end system to use the FragmentStreamID 
      for reassembly.  An intermediate system uses the FragmentStreamID
      of a Content Object to ensure that only one stream of
      Content Object fragments follow a reverse PIT entry.
      </t>
      
      <t>A system SHOULD use a random number for an Interest's
       FragmentStreamID.  This avoids easy denial-of-service attacks
       by replying with junk for known fragment stream IDs.
       A fragmented Content Object carries
      both its own FragmentStreamID, which SHOULD be based
      on the ContentObjectHash, and the corresponding Interest
      FragmentStreamID to facilitate matching on the reverse
      PIT path.</t>
      
      <t>
      If the Maximum Path MTU of a Content Object fragment is larger than the supported
      MTU on an egress interface, the fragment stream should
      be dropped on that interface, even if some of the fragments fit within the
      MTU.
      </t>
      
      <t>
      Fragments are identified by a serial counter FragNum, which ranges
      from 0 - 63.  Forwarders and end systems should drop duplicate
      fragments, identified by the tuple {FragmentID, FragNum}.
      </t>
      <t>
      If
      all fragments are not received within a system-dependent timeout, 
      a system re-assembling fragments should timeout.  If
      the re-assembly of an Interest times out before the PIT entry, the
      PIT entry on the local system should be removed to allow a new
      fragment stream to arrive.  If the re-assembly of a Content Object
      times out, the received fragments bitmask of the PIT should be
      cleared to allow a new stream of Content Objects to arrive.
      </t>
      
      <section anchor="interest" title="Interest Fragmentation">
      <t>
      If an Interest does not fit with 1280 bytes, then it must be 
      fragmented to fit within 1280 bytes.  There
      is no path MTU discovery for Interests.
      </t>
      <t>
      As an Interest goes through the FIBs, it records the minimum path MTU
      based on the egress interface's MTU.  A Content Object sent in
      response must be fragmented to less than or equal to the minimum path
      MTU.  A forwarder may choose to put 1280 in the Minimum Path MTU
      field even if it supports larger MTUs.
      </t>
      <t>
      Interests follow the FIB and all fragments of an Interest (i.e. the
      same fragment id) should follow the same FIB choices.  If at a later
      time a similar interest arrives with a smaller minimum path MTU, it
      should be forwarded even though it is similar, to ensure that a
      returned Content Object is fragmented to a size that satisfies the
      Interest's path.
      </t>
       <t>
      A forwarding node must examine the Interest name to determine
      its forwarding.  This requires that the forwarding node re-assemble
      the front of the Interest to examine the name.  In a typical case,
      this means that the node must receive fragment 0 to have enough
      prefix name components to compute the route.  A system MAY discard
      out-of-order fragments after fragment 0 during this re-assembly, 
      and once fragment 0 arrives and the
      system constructs a PIT entry with the routing, it should send a
      control message along the Fragment Stream ID's reverse path to
      cause the source to resend the interest stream, which can now be
      forwarded out of order. Or, it may buffer out-of-order fragments.
      </t>
      <t>
      A system that receives an Interest encapsulated in a packet larger
      than 1280 octets must discard it.
      </t>
      </section>
      
      <section anchor="objects" title="Content Object Fragmentation">
      <t>
      When forwarding a Content Object along the reverse path of the PIT, a
      fragment stream may only be forwarded along reverse PIT entries for
      which it satisfies the reverse path minimum MTU.
      </t>
        <t>
      A PIT entry should only be removed once all fragments of a fragment
      stream pass through, or it times out.  Because the FragCnt is limited
      to 63, a system may match a first stream's Fragment ID and use a
      single 64-bit mask.
        </t>
        <t>
      A Content Object is fragmented based on the Interest minimum path
      MTU.  It carries an "Maximum Fragment MTU" field set to the maximum
      fragment size, which must be no more than an Interest's
      minimum path MTU.  Because a fragment stream may only satisfy PIT
      entries with larger or equal minimum path MTU, all fragments must
      carry the Object's fragmentation size.  An intermediate node may, for
      example, receive the last fragment first, so even if fragments were
      packed to maximum size, the forwarder could not infer which PIT
      entries the object satisfies without know the fragment stream's
      fragmentation size
        </t>
      </section>
      
    </section>
    
    <section anchor="packets" title="Packet Formats">
      <t>End-to-end fragmentation uses a hop-by-hop TLV header for
      fragmentation.  There is one header for Interests and one
      header for Content Objects.</t>
      
      <texttable anchor="hph_types" title="Hop-by-hop Header Types">
        <ttcol align="center">Type</ttcol>
        <ttcol align="center">Abbrev</ttcol>
        <ttcol align="center">Name</ttcol>
        <ttcol align="left">Description</ttcol>
        
        <c>%x0006</c>
        <c>T_INTFRAG</c>
        <c><xref target="interest_header">Interest fragmentation header</xref></c>
        <c>Hop-by-hop fragmentation header for Interests.</c>
        
        <c>%x0007</c>
        <c>T_OBJFRAG</c>
        <c><xref target="object_header">Content Object fragmentation header</xref></c>
        <c>Hop-by-hop fragmentation header for Content Objects.</c>     
        
      
      </texttable>
      
      <t>Both fragmented Interests and Content Objects use the fields
      FragCnt and FragNum.  The count is the number of fragments
      in the message, which has a minimum of 1.  FragNum is the 0-based
      fragment number.  Sequential fragment numbers represent sequential
      byte boundaries of the original object.</t>
      
      <section anchor="interest_header" title="Interest Header">
      <t>The field FragmentStreamID identifies a contiguous stream
      of fragments.  It SHOULD be a random number.</t>
        
        <t>The field PathMinimumMTU is updated per-hop to measure
        the minimum path MTU of the interest's reverse path.</t>
      <figure>
        <artwork align="left"><![CDATA[     
                    1                   2                   3
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+---------------+---------------+---------------+---------------+
|         T_INTFRAG             |             LENGTH            |
+---------------+---------------+---------------+---------------+
|                       FragmentStreamID                        |
|                                                               |
+---------------+---------------+---------------+---------------+
|       PathMinimumMTU          | X X | FragCnt | X X | FragNum |
+---------------+---------------+---------------+---------------+
 ]]></artwork>
          </figure>  
      </section>
      
      <section anchor="object_header" title="Content Object Header">
        <t>The field FragmentStreamID identifies a contiguous stream
          of fragments for the Content Object.  It SHOULD be derived from
        the Content Object's hash, so two objects with the same Fragment Stream ID
        represent the same fragmented object.</t>
        
        <t>The field InterestStreamID is the Fragment ID of the corresponding
        Interest that the object is answering.  This allows PIT matching without
        having to reconstruct the Content Object.  It makes Content Objects
        specific to a given Interest similarity hash.</t>
        
        <t>The field ObjectMaximumMTU is the maximum size of any fragment
        in the fragment stream.  This allows a forwarder to match a content
        object fragment stream against a reverse path MTU size and not send
        a fragment stream that will not fit down a path.</t>
        <figure>
          <artwork align="left"><![CDATA[     
                    1                   2                   3
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+---------------+---------------+---------------+---------------+
|         T_OBJFRAG             |             LENGTH            |
+---------------+---------------+---------------+---------------+
|                       FragmentStreamID                        |
|                                                               |
+---------------+---------------+---------------+---------------+
|       ObjectMaximumMTU        | X X | FragCnt | X X | FragNum |
+---------------+---------------+---------------+---------------+
|                       InterestStreamID                        |
|                                                               |
+---------------+---------------+---------------+---------------+
 ]]></artwork>
        </figure>  
      </section>
     
    </section>
    <section anchor="cache" title="Cache Considerations">
      <t>Objects should be reassembled before sending from cache, to ensure all fragments exist at the cache.</t>
      
      <t>Single fragment Interests may be satisfied from cache.  A system may choose to reassemble Interests
      to try and answer from cache.  If a cache miss, the original fragment stream should be forwarded.</t>
    </section>
    
    <section anchor="Acknowledgements" title="Acknowledgements"> </section>

    <!-- Possibly a 'Contributors' section ... -->

    <section anchor="IANA" title="IANA Considerations">
      <t>TODO: Work with IANA to define the type space for: Hop-by-hop header types.</t>

      <t>All drafts are required to have an IANA considerations section (see <xref target="RFC5226"
          >Guidelines for Writing an IANA Considerations Section in RFCs</xref> for a guide). If the
        draft does not require IANA to do anything, the section contains an explicit statement that
        this is the case (as above). If there are no requirements for IANA, the section will be
        removed during conversion into an RFC by the RFC Editor.</t>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>All drafts are required to have a security considerations section. See <xref
          target="RFC3552">RFC 3552</xref> for a guide.</t>
    </section>
  </middle>

  <!--  *****BACK MATTER ***** -->

  <back>
    <!-- References split into informative and normative -->

    <!-- There are 2 ways to insert reference entries from the citation libraries:
    1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
    2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
       (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

    Both are cited textually in the same manner: by using xref elements.
    If you use the PI option, xml2rfc will, by default, try to find included files in the same
    directory as the including file. You can also define the XML_LIBRARY environment variable
    with a value containing a set of directories to search.  These can be either in the local
    filing system or remote ones accessed by http (http://domain/dir/... ).-->

    <references title="Normative References">
      <!--?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"?-->
      &RFC2119; </references>

    <references title="Informative References">
      <!-- Here we use entities that we defined at the beginning. --> &RFC3552; &RFC5226;
      <!-- A reference written by by an organization not a person. -->

      <reference anchor="CCN" target="http://www.CCNx.org">
        <front>
          <title>CCNx Open Source</title>

          <author>
            <organization>PARC, Inc.</organization>
          </author>

          <date year="2007"/>
        </front>
      </reference>
    </references>

  </back>
</rfc>
